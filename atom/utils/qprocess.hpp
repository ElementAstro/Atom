#ifndef ATOM_UTILS_QPROCESS_HPP
#define ATOM_UTILS_QPROCESS_HPP

#include <memory>
#include <string>
#include <vector>

namespace atom::utils {
/**
 * @brief A class to manage and interact with external processes.
 *
 * The `QProcess` class provides methods to start and control external
 * processes. It allows setting working directories, managing environment
 * variables, and reading from or writing to the process's standard output and
 * error streams.
 */
class QProcess {
public:
    /**
     * @brief Default constructor for `QProcess`.
     *
     * Initializes a new `QProcess` instance. The process is not yet started and
     * no environment or working directory is set.
     */
    QProcess();

    /**
     * @brief Destructor for `QProcess`.
     *
     * Cleans up resources used by the `QProcess` instance. If the process is
     * still running, it will be terminated.
     */
    ~QProcess();

    /**
     * @brief Sets the working directory for the process.
     *
     * @param dir The path to the working directory for the process.
     *
     * This method sets the directory where the process will start. If not set,
     * the process will use the current working directory.
     */
    void setWorkingDirectory(const std::string& dir);

    /**
     * @brief Sets the environment variables for the process.
     *
     * @param env A vector of environment variables as strings.
     *
     * This method sets the environment variables that will be used by the
     * process. If not set, the process will inherit the environment of the
     * parent process.
     */
    void setEnvironment(const std::vector<std::string>& env);

    /**
     * @brief Starts the external process with the given program and arguments.
     *
     * @param program The path to the executable program to start.
     * @param args A vector of arguments to pass to the program.
     *
     * This method starts the process with the specified program and arguments.
     * The process will begin execution asynchronously.
     */
    void start(const std::string& program,
               const std::vector<std::string>& args);

    /**
     * @brief Waits for the process to start.
     *
     * @param timeoutMs The maximum amount of time to wait in milliseconds. If
     * negative, it will wait indefinitely.
     *
     * @return `true` if the process has started within the specified timeout,
     * `false` otherwise.
     */
    auto waitForStarted(int timeoutMs = -1) -> bool;

    /**
     * @brief Waits for the process to finish.
     *
     * @param timeoutMs The maximum amount of time to wait in milliseconds. If
     * negative, it will wait indefinitely.
     *
     * @return `true` if the process has finished within the specified timeout,
     * `false` otherwise.
     */
    auto waitForFinished(int timeoutMs = -1) -> bool;

    /**
     * @brief Checks if the process is currently running.
     *
     * @return `true` if the process is running, `false` otherwise.
     */
    [[nodiscard]] auto isRunning() const -> bool;

    /**
     * @brief Writes data to the process's standard input.
     *
     * @param data The data to write to the process's standard input.
     *
     * This method sends data to the process's standard input stream. The data
     * will be passed to the process as if it were typed in directly.
     */
    void write(const std::string& data);

    /**
     * @brief Reads all available data from the process's standard output.
     *
     * @return A string containing all data read from the process's standard
     * output.
     *
     * This method reads and returns all data that has been written to the
     * process's standard output stream. This includes any output generated by
     * the process during its execution.
     */
    auto readAllStandardOutput() -> std::string;

    /**
     * @brief Reads all available data from the process's standard error.
     *
     * @return A string containing all data read from the process's standard
     * error.
     *
     * This method reads and returns all data that has been written to the
     * process's standard error stream. This includes any error messages or
     * diagnostics generated by the process.
     */
    auto readAllStandardError() -> std::string;

    /**
     * @brief Terminates the process.
     *
     * This method forcefully terminates the process if it is still running. Any
     * resources associated with the process will be cleaned up.
     */
    void terminate();

private:
    class Impl;  ///< Forward declaration of the implementation class
    std::unique_ptr<Impl> impl_;  ///< Pointer to the implementation details of
                                  ///< the `QProcess` class
};
}  // namespace atom::utils

#endif  // ATOM_UTILS_QPROCESS_HPP
